(* -------------------------------------------------------------------- *)
require import AllCore Array List Ring StdRing StdOrder.
(*---*) import IntID RealOrder.

(* -------------------------------------------------------------------- *)
pragma -oldip.

(* -------------------------------------------------------------------- *)
type msg.
type gmem, lmem.

type mem = gmem * lmem.

type converter = { readc : msg -> msg; writec : msg -> msg; }.

(* -------------------------------------------------------------------- *)
type resource = {
  ninterfaces : int;
  msgok       : bool -> int -> msg -> bool;
  read        : int -> mem -> mem * msg;
  write       : int -> mem -> msg -> mem;
}.

op bread  = true.
op bwrite = false.

(* -------------------------------------------------------------------- *)
op isindex (r : resource) (i : int) =
  0 <= i < ninterfaces r.

op isresource (r : resource) =
     (0 < ninterfaces r)
  /\ (forall b i m, msgok r b i m => isindex r i)
  /\ (forall i mem m, !msgok r bwrite i m => write r i mem m = mem)
  /\ (forall i mem, isindex r i => msgok r bread i (read r i mem).`2).

(* -------------------------------------------------------------------- *)
type instance_ =
 { resource : resource;
   globals  : gmem;
   locals   : lmem array; }.

op isinstance (inst : instance_) =
  size inst.`locals = ninterfaces inst.`resource.

op lmem (inst : instance_) (i : int) =
  inst.`locals.[i].

(* -------------------------------------------------------------------- *)
op iread (inst : instance_) (i : int) =
  if isindex inst.`resource i then
    let lmem = lmem inst i in
    let (mem, msg) = read inst.`resource i (inst.`globals, lmem) in
    let inst =
      {| inst with
           globals = mem.`1;
           locals  = inst.`locals.[i <- mem.`2]; |}
    in (inst, msg)

  else (inst, witness).

(* -------------------------------------------------------------------- *)
op iwrite (inst : instance_) (i : int) (m : msg) =
  if isindex inst.`resource i then
    let lmem = lmem inst i in
    let mem = write inst.`resource i (inst.`globals, lmem) m in
    {| inst with
         globals = mem.`1;
         locals  = inst.`locals.[i <- mem.`2]; |}

  else inst.

(* -------------------------------------------------------------------- *)
op cmsgok (c : converter) (ci : int) (r : resource) (b : bool) (i : int) (m : msg) =
  if isindex r ci && i = ci then
    if b (* bread *) then
      exists m', msgok r b i m' /\ m = c.`readc m'
    else
      msgok r b i (c.`writec m)
  else msgok r b i m.

(* -------------------------------------------------------------------- *)
op cread (c : converter) (ci : int) (r : resource) (i : int) (mem : mem) =
  if isindex r ci && i = ci then
    let (mem, m) = read r i mem in
    (mem, c.`readc m)
  else read r i mem.

(* -------------------------------------------------------------------- *)
op cwrite (c : converter) (ci : int) (r : resource) (i : int) (mem : mem) (m : msg) =
  if isindex r ci && i = ci then
    write r i mem (c.`writec m)
  else write r i mem m.

(* -------------------------------------------------------------------- *)
op rapply (r : resource) (c : converter) (i : int) : resource =
  {| r with msgok = cmsgok c i r;
            read  = cread  c i r;
            write = cwrite c i r; |}.

(* -------------------------------------------------------------------- *)
lemma isresource_rapply r c i :
  isresource r => isresource (rapply r c i).
proof. smt(). qed.

(* -------------------------------------------------------------------- *)
lemma cmsgok_out c ci r : !isindex r ci => cmsgok c ci r = msgok r.
proof.
move=> h; apply/fun_ext => b; apply/fun_ext => i; apply/fun_ext => m.
by rewrite /cmsgok /= h.
qed.

(* -------------------------------------------------------------------- *)
lemma cmsgok_eq c ci r1 r2 :
     r1.`ninterfaces = r2.`ninterfaces
  => r1.`msgok = r2.`msgok
  => cmsgok c ci r1 = cmsgok c ci r2.
proof. by move=> eq1 eq2; rewrite /cmsgok /isindex eq1 eq2. qed.

(* -------------------------------------------------------------------- *)
lemma rapply_swap r c1 i1 c2 i2 : i1 <> i2 =>
    rapply (rapply r c1 i1) c2 i2
  = rapply (rapply r c2 i2) c1 i1.
proof.
move=> ne_i1i2; rewrite /rapply /=; congr.
+ case: (isindex r i1) => h1; last first.
  * by rewrite !(@cmsgok_out _ i1) //=; apply: cmsgok_eq.
  case: (isindex r i2) => h2; last first.
  * by rewrite !(@cmsgok_out _ i2) //=; apply: cmsgok_eq.
  apply/fun_ext => b; apply/fun_ext => i; apply/fun_ext => m.
  rewrite /cmsgok !(h1, h2) /=; case: (i = i1) => [->>|].
  * by rewrite ne_i1i2.
  * by case: (i = i2).
+ case: (isindex r i1) =>h1; last first. (* start with easy case*)
  (* index 1 is not valid: replace and trivial.*) 
  * apply/fun_ext => i; apply/fun_ext => m.
  by rewrite /cread /= h1.
  (* valid index 1: same thing if index 2 is invalid.*)
  case: (isindex r i2) =>h2; last first.
  * apply/fun_ext => i; apply/fun_ext => m.
  by rewrite /cread /= h2.
  (* Deal with two valid indices.*)
  * apply/fun_ext => i; apply/fun_ext => m.
  rewrite  /cread (h1,h2) /=; case: (i = i1) => [->>|].
  by rewrite ne_i1i2.
  by case: (i = i2).
+ case: (isindex r i1) =>h1; last first.
  * apply/fun_ext => i; apply/fun_ext => mem; apply/fun_ext => msg.
  by rewrite /cwrite /= h1.
  case: (isindex r i2) => h2; last first.
  * apply/fun_ext => i; apply/fun_ext => mem; apply/fun_ext => msg.
  by rewrite /cwrite /= h2.
  * apply/fun_ext => i; apply/fun_ext => mem; apply/fun_ext => msg.
  rewrite /cwrite (h1,h2) /=.
    - case: (i = i1) => [->>|].
    by rewrite ne_i1i2.
    - by case (i = i2).
qed.

(*-------------------------------------------------------------------- *)
op converter1 = {| readc = idfun; writec = idfun; |}.

op ( \o ) (c1 c2 : converter) =
  {| readc  = c2.`readc  \o c1.`readc ;
     writec = c1.`writec \o c2.`writec; |}.

lemma addc0 c : c \o converter1 = c.
proof. by case: c. qed.

lemma add0c c : converter1 \o c = c.
proof. by case: c. qed.

lemma addA : associative ( \o ).
proof. by do 3! (case => ??). qed.

(* -------------------------------------------------------------------- *)
lemma cmsgok0 ci r : cmsgok converter1 ci r = r.`msgok.
proof.
apply/fun_ext => b; apply/fun_ext => i; apply/fun_ext => m.
rewrite /cmsgok; case: (_ && _) => //=; case: b => _ //.
by apply/eq_iff; split => [[m' [? ->]]|?]; last exists m.
qed.

(* -------------------------------------------------------------------- *)
lemma cread0 ci r : cread converter1 ci r = r.`read.
proof.
apply/fun_ext => i; apply/fun_ext => m.
by rewrite /cread; case: (_ && _) => //=; case: (r.`read _ _).
qed.

(* -------------------------------------------------------------------- *)
lemma cwrite0 ci r : cwrite converter1 ci r = r.`write.
proof.
apply/fun_ext => i; apply/fun_ext => m.
by rewrite /cwrite; case: (_ && _) => //=; case: (r.`write _ _).
qed.

(* -------------------------------------------------------------------- *)
lemma rapply1 r i : rapply r converter1 i = r.
proof. by rewrite /rapply cmsgok0 cread0 cwrite0; case: r. qed.

(* -------------------------------------------------------------------- *)
op rapplys1 cs r i =
  rapply r (nth witness cs i) i.

op rapplys (r : resource) (cs : converter list) =
  foldl (rapplys1 cs) r (iota_ 0 (size cs)).

(* -------------------------------------------------------------------- *)
lemma rapply_comp r c1 c2 i :
    rapply r (c1 \o c2) i
  = rapply (rapply r c1 i) c2 i.
proof.
rewrite /rapply; congr => /=.
+ apply/fun_ext => b; apply/fun_ext => j; apply/fun_ext => m.
  case: (isindex r i) => hri; last by rewrite /cmsgok hri.
  rewrite /cmsgok hri /=; case: (j = i) => [<<-|] //=; case: b => hb //.
  apply: eq_iff; split.
  - by case=> [m1] [] hmsg1 ->; exists (c1.`readc m1) m1.
  - by case=> [m1] [] [m2] [] hmsg2 -> ->; exists m2.
+ apply/fun_ext => j; apply/fun_ext => mem.
  case: (isindex r i) => hri; last by rewrite /cread hri.
  rewrite /cread hri /=; case: (j = i) => [<<-|] //.
  by case: (r.`read j mem) => /=.
+ apply/fun_ext => j; apply/fun_ext => mem; apply/fun_ext => m.
  case: (isindex r i) => hri /=; last by rewrite /cwrite hri.
  by rewrite /cwrite hri /=; case: (j = i) => [<<-|].
qed.

(* -------------------------------------------------------------------- *)
op ( || ) : resource -> resource -> resource.
op ( ^^ ) : converter -> converter -> converter.

(* -------------------------------------------------------------------- *)
axiom rapply_para r1 r2 c1 c2 i :
    rapply (r1 || r2) (c1 ^^ c2) i
  = ((rapply r1 c1 i) || (rapply r2 c2 i)).

(* -------------------------------------------------------------------- *)
type pseudometric = resource -> resource -> real.

(* -------------------------------------------------------------------- *)
op ispseudometric (d : pseudometric) =
     (forall r, d r r = 0%r)
  /\ (forall r s, d r s = d s r)
  /\ (forall s r t, d r t <= d r s + d s t).

(* -------------------------------------------------------------------- *)
op iscompatible (d : pseudometric) =
     ispseudometric d
  /\ (forall r r' s s', d (r || r') (s || s') <= d r s + d r' s')
  /\ (forall r s c i, d (rapply r c i) (rapply s c i) <= d r s).

(* -------------------------------------------------------------------- *)
lemma isc_rapplys d r s cs : iscompatible d =>
  d (rapplys r cs) (rapplys s cs) <= d r s.
proof.
case=> [[_ [hd1 hd2]] [_ h]]; rewrite /rapplys.
elim: {2 4}cs 0 r s => [|c cs' ih] x r s.
+ by rewrite /rapplys /= iota0.
rewrite /rapplys /= (addrC 1) iotaS ?size_ge0 /=.
rewrite {2 4}/rapplys1; pose c' := nth _ _ _.
apply/(ler_trans _ _ _ _ (h _ _ c' x))/ih.
qed.

(* -------------------------------------------------------------------- *)
lemma rapplys_s1 r c i :
  rapplys r (rcons (nseq i converter1) c) = rapply r c i.
proof. admitted.

(* -------------------------------------------------------------------- *)
lemma rapplys_1R r cs :
  rapplys r (rcons cs converter1) = rapplys r cs.
proof. admitted.

(* -------------------------------------------------------------------- *)
lemma rapplys_zip (r : resource) (cs1 cs2 : converter list) :
  size cs1 = size cs2 =>
    rapplys (rapplys r cs1) cs2
  = rapplys r (map (fun c : _ * _ => c.`2 \o c.`1) (zip cs1 cs2)).
proof. admitted.

(* -------------------------------------------------------------------- *)
op A = 0.
op B = 1.
op E = 2.

op bottom : bool -> converter.

(* -------------------------------------------------------------------- *)
op d : pseudometric.

axiom psd : ispseudometric d.
axiom pcd : iscompatible   d.

(* -------------------------------------------------------------------- *)
op sc (e : real) (R S : resource) (c1 c2 : converter) =
     R.`ninterfaces = 3
  /\ S.`ninterfaces = 3
  /\ forall b,
          d (rapplys R [c1; c2; bottom b]) (rapply S (bottom b) E) <= e
       /\ exists sigma, d (rapplys R [c1; c2]) (rapply S sigma E) <= e.

(* -------------------------------------------------------------------- *)
lemma L1 e e' c1 c2 c1' c2' R S T :
     sc e  R S c1  c2
  => sc e' S T c1' c2'
  => sc (e + e') R T (c1' \o c1) (c2' \o c2).
proof.
case=> [R3 [S3 hRS]] [_ [T3 hST]]; do! split => // b; split.
  + have [{hRS} hRS _] := (hRS b); have [{hST} hST _] := (hST b).
  case: psd => [_ [dsym dineq]]; have := ler_add _ _ _ _ hRS hST.
  apply/ler_trans. pose z := rapplys S [c1'; c2'; bottom b].
  apply/(ler_trans _ _ _ (dineq z _ _))/ler_add2r => @/z => {z}.
  apply: (ler_trans _ _ _ _ (isc_rapplys _ _ _ [c1'; c2'] pcd)).
  rewrite -2!(rapplys_1R _ [c1'; c2']) /= !rapplys_zip //=.
  rewrite add0c lerr_eq; congr. rewrite -(rapplys_s1 _ _ E).
  rewrite /E (nseqS 1) // (nseqS 0) // nseq0 /=.
  by rewrite rapplys_zip //= !(addc0, add0c).
  + have [{hRS} hRS [s]] := (hRS b); have [{hST} hST [s']] := (hST b).
  pose sigma := s \o s'.
  move => hs' hs.
  exists sigma.
  case: psd => [_ [dsym dineq]].
  print ler_add.
  have := ler_add _ _ _ _ hs hs'.
  apply/ler_trans.
  pose z:= rapplys S [c1'; c2'; s].
  (*
    Commutativity -> use different lemmas with proper composition.
    Pseudo-metric compatible.
    Commutativity.
  *)
  admitted.
(* -------------------------------------------------------------------- *)
lemma L2 e e' c1 c2 c1' c2' R S R' S' :
     sc e  R  S  c1  c2
  => sc e' R' S' c1' c2'
  => sc (e + e') (R || R') (S || S') (c1' ^^ c1) (c2' ^^ c2).
proof.
(*
    rewrite /sc //=.
    move=> sc1 sc2.    
    move=> n1 n2.  
    case.
    split.
    (* rapplys + triangle inequality. *)
*)
admitted.
  
(* -------------------------------------------------------------------- *)
lemma L3 R :
  R.`ninterfaces = 3 => sc 0%r R R converter1 converter1.
proof.
move=> hR3; do! split => // b; split.
+ pose cs := [_; _; bottom b].
  have ->: cs = rcons (nseq E converter1) (bottom b).
  * by rewrite /E (nseqS 1) // (nseqS 0) // nseq0 /=.
  by rewrite rapplys_s1; case: psd => ->.
+ admit.
admitted.
